#!/bin/bash
##############################################################################
# ESG Federation download script
#
# NOTE: this file has been modified to remove data files that do not
# correspond to the study time range, i.e. outside 1976-2005 and 2041-2070.
# Additionally, egrep has been replaced with grep -E.
# Last updated by N. M. Streethran - Wed 14 Sep 23:29:08 IST 2022.
#
# Template version: 1.2
# Generated by esg-dn1.nsc.liu.se - 2022/09/14 16:49:06
# Search URL: https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.sund.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rsus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.mrso.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tasmin.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tasmax.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rlus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rlds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rsds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.evspsblpot.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.sund.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tasmin.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tasmax.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rsus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rlus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rlds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rsds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.mrso.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.evspsblpot.v20160803|esg-dn1.nsc.liu.se
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############"
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.sund.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rsus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.mrso.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tasmin.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.tasmax.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rlus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rlds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.rsds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.day.evspsblpot.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.sund.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tasmin.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.tasmax.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rsus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rlus.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rlds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.rsds.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.mrso.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.day.evspsblpot.v20160803|esg-dn1.nsc.liu.se'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '98deec310bef7e597fdaea4e850b76abaed190812caccd5e903068d5c1d111df'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '5e4b270b47d72f54c618c842a916d0b656a56fd97baeef4aa4b690dd8b396653'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '5dc0ff10d59881ffbeb9f49d1bc6923849a551be9bcc62cd9e692bce33560716'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '39f3f09b9196c6235c535c3e2b2a3436abddd67e8bf780d32fe5854db4037c42'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' 'ec15af707dba71bf85c03ee432419a1caec463a01ea1d44d591b0e99490a8cbe'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '5c11c9ac485acfad4d101fd8b16910d439530af61c3d889bdf69ac87fc605528'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '21dbaebe8fa7c80953f2cb9d9ddd8676dcaaba3001f1d8339884a12130e1ed34'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '9a6cfdf2f6a1a8aa3c6b778e2e25fe6e9a757fb63192cdd9718df6c082fb12a3'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '9525938bc364cb258726d404b13c750d5f3741cbd5293e36c0821b151d2c47b2'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '2f85b980702566e471b58be2dd563511687aaa4cbe9189afb8a213c798f60507'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '2daf51c879fb3a192007172bd9e6ca6312e6ee4863f1d263a4270882976a48d6'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '8ee7fc3ca01c3d3ee1e20e87e0af5c167abd5b57ba888010a064fab2f797c471'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '4fc4faeb8675c59cdc6c7a8965dc705c448de5d57c78b04f9e54422ab0ee4e9c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '8283008dbc0b5794c0556de21b1c54aba3fd71ddde1aa83ac9d1a011771d3739'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '6d79a5d577ecd33b11aff47cfae64950d2b921e5733363e4fad478de0adedda4'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '2e9007f00083f421775c3e85568db22a6e5d96cde905397523a3456d24395289'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '5995ee94eda2e5c99f2d89a01b68b5d4f1b2a37134aa06e1941dc3ab5b6c2afa'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '928d2ade646abe3d8897bec771f82fd2cb3ddf665edb51cb497afd32273a46e2'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '06aa4e3a0e45c88989d9f0d670b377d2a72739247567eced2fa6a3c83f83355d'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '7a73e4fa0efc20b56be97b2b28b5243d03cdadcedaff07df6fed79c5bc7aa6f3'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '532c65d446d321c39e27b0bca915fa2383b326b899c808193d5db941ed3f3990'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '07979a20f709beb224985d3c02c4c080a1ecbde8410d0c6d741e4635927786ca'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '9bef479545a19376e121695451ef76dbefd246b222d8d78441edcb2eae95a922'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '0500077c5e5722cfd4bbe1263ea580ad1557003aa1bb2e8f51e38ebe551710a2'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '4410899be79bd47fca2ae60695b007629f6d70ba22b8fe50cbb51bed4a67ab1a'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '55d27900db4a2148d6faa61de7e70bf4059a7c8032be52b2ae7cbc732929e617'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '42f7a1820fa34a376ece7199a26f351eda7f63d9ead76f9c64252517a914fe64'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '42a576b66a7b72b777a68f41ea888199cd85914b15a4776d3ee81b2f70633bec'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '34415635c1ec163d8ce34d9c288be12283754f6b9514dbc257e5f7156fb1f06a'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '6379f6d783cd5aab4a55bcefd9b9707eb1e6ccf47dbedbe6859152d442caab54'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '5b59032c40e5237a22b68b76145504afc365dfdf83565bd6caed80c867a42840'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' 'c5186cfe411cd27127b77acba6e6d9efe6750ce39081ed71d8b09351b7885d0f'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' 'a769a466b2cdae6343146d1af1695cb10a7cf8744bbc2581265b7f08663ada50'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' 'd7235d9788aa88f5302cfd209ad0c456dce498c6e8d4ba21b4580c84aef32b5a'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '2c2f15eeee1cb3f082fb0c9c3d49aaa98dd8772a3b85fb4e87ae2f0b06d6a241'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '0fd555d811c99b74660c2accc1e3017898cb3857b6253b26814df980d3bd1749'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' 'a00f8dfc3f75b421346db38b21d45cb401b878f4132b7a1a7d923f54e7e7b295'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' 'b97c8588efe96c79b4cd16ebdca566cb056bb8b1c99db1086913255bd43d96f3'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '68b68d3cf4e66aa55d85161e1f9b17f2e87d8815e543ef372ed7f7ac1f14f3b6'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '765bb7e074b186323f87195442740381225644e750344f0c782c7532ffc14f89'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' 'f99c4c5c335c5000bd2befedea838f17a6af9db76fcea4808eaeb42980c93793'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '22e4e48da779c002a4012b8532d14c5df8b5d6ecc2052694bfbc67ca5dc1fabb'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '17a4c0364fa6001c6e92d4cd38570e9480c49d449090fdebbd47bcda8bef4de3'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' 'b9cd211efaa8d65f7f59fee9e59f4f4f2d11239b5c9d7adc8713ba7c13c96d07'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '72a42360483ef34957b38c56aaaa441fd3f8793b8962ce4446d9868c5cdda9f4'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '182409ccc3f6aec6113710d4ed9233d53609c640d15a14b9695345d749874b60'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '628da4c724865b2741e3e73ccef25b8eda217af2a607189f56af56e54ede9da3'
'sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '7c538a89018ed5a146b4b599708eed11daa7bb04411f6db6e9364d82b314e4b6'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '88faa77881ac13b3a8418e5f4414f81ebc6363799cab0ed20fa6640d2bee2531'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '0ae59f9377a934f2a0c7844b6ac14e411bb3f26bb864a15b11b66e33769abf4c'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '5f13f2aa2dc59633a097176ab399106fb607517ec478d05471104624622dd07e'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' '96fbc497ffb9fedb11e30b9c396cfe4645dca569c3c8817e6bb5f91e594439dc'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' 'bc23f142c6c525f4b61f8282a946aab4a8dd6c3ec7b42ab9b469d4eaef58e2a1'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' 'cfc48f7df3b884bea18d77a1b1d11f76720c3f0f1efe807bb98eaad75aca0b12'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' '41d6b113fcb14ab459990b720ed742792117c512acbe719bc543013104c3918b'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' 'bc7f0939f2ab44ec0abdb11d1ee994510f09cb3a63db8bea82d2be80ca78346e'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' 'ccc5c6fd749f602d4b6bb18fba574de3bd4a539caac7411ad0679af535bd95d6'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' 'b515660f073660423aaf86bbda7968f26ca9be1a5ea879ec04639522b1762471'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' 'e4e64758a3a4a76aaff3eb0e37741eca0a466e72ec9e734f5d1d84704f0627de'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' 'c9fcc5e6d1e6ffa0e93c5f177950f489e03425ef619721755696ed6988e04c5d'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19760101-19801231.nc' 'SHA256' 'c14c9454d2d3ca29301b0afdece00e0f4b4eb411b18b08da3c3adda98af60a4f'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19810101-19851231.nc' 'SHA256' '568b133dd12fe406208024ed185b4822e3eb966513e4062b785613c910ed687d'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19860101-19901231.nc' 'SHA256' '7077a3c53a551a6563fda8ff4dab5c818673ac36ffa20374e8134d5c321505d0'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19910101-19951231.nc' 'SHA256' 'ade8635818ca37741b8eefd6294cc47a4841503cf28a6b45482dedd3897f8c6a'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_19960101-20001231.nc' 'SHA256' '69e66d2ebb3fa6e46a439add29421e24fa22c582dfe5fe8f36c0154fbb2a898d'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_day_20010101-20051231.nc' 'SHA256' '373ad45e9ae512c0ee27324a29aa01761784468030b37bda0ca8b6eee62b438d'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' 'a01e50330bfd7ce4d8eb8d2c791229dbb63cff7521ac629f86e1cdd5f5e48627'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '9baf277cca5a5404a5119e31f1866c5ef46830f04801d314860544863ea3a784'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' 'c5b6480e8550663ca253651949a74aadd463fd4337d32a57641becd8efb573c5'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' 'a5cecd1350dc0f6e55a45fe22f8e4b7291d92e9bcfc34037f78a945c7403c30d'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' 'f2f214f4c0d61b2545df398aa20d18a3691a9b0086399bb995e37a740baaeefe'
'evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/evspsblpot/v20160803/evspsblpot_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '614e3502f27af66b46cfa1cf705cef75448be932f7ec1efe466f1b7cffb0bc24'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '0c599538fc1fe959d754ddcef24a0169175ece0e20ee3a0298d8685e5a9dd3b0'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '8cd62189fd3f1d8a8a31ca053a167cf3aa2510bca31154f5bd26189f74cf3493'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' 'd09af22216d5d4a405c3a18b4731ccc860aef73c927c3fc259590338e9222214'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '88d01a9135d5c12ffcb3c23b7c65c15de6d1765fad7ef6f91a1f0d07a935e285'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' 'adb8c9926da641b9dc05b1a0ae2aed417cf0e97d6bf0140b84612a8b25988bdd'
'mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/mrso/v20160803/mrso_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '0f2cbb6b901be77c8665067eaafd3a005b77778b7ebdf7fff97ee188e58d8ea8'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '1ef2954c233a78b6eeb291c596e750b751a4e83cb49df0a91cf1a19fa381595e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '7651a7fd916a41dbbf8d92e436400bab5d3dbfb0b5cd878c76cc3f8b3d9f5392'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '33a4e204025098fe3a7fed585333b69d4c0e23af84c9dc3a7f65abe475cf8cce'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '6f53e8f386cc620c39123ac8ec56fd2b6926a7adb71d08abbc545cdd81fdcb57'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '50a13c184a5023825f8cf19e4744766e304b135a5840abc96e1fc7b6c02ee5a9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '534350cf38c4cfbe1624349aee388ff9b6ff939b380708e8b9913d3387ce0e2b'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '672b41061aeffb0c3cee402da1b3ea0cbf7236a9e96fd15a55f6a78ec52f0b03'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '144ce68ab4786d4210a8f0d87224401793698ea506982ae639d5f1c4521f9a72'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '68c409cec77116a57362c32d759ad8e035c8128d042329db6e03fb6bf62a4574'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' 'b7291470afe7761b72f4c59af09eef93846e876e05a2dd69411dd9c847bcce25'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '28117f3d88a79e6752d5ef5db9026cd8cfd7e2e28b28611822a81bc96f3c49fb'
'rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlds/v20160803/rlds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '2593c9aeba9b19512c85923905c7f78132594d09148a932026a6b934a1e518fe'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' 'e6b8b5a9a18f88ad1a801596da0afb25848934da4c882cad603956edc0914b03'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '4a072ba622a3c302826ddc3a8a5e7eb235cc2edef2b183fc44a4a1d2ad1a3940'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '446252ce410bee9d069006388e55408768a781059af6deb5c88ee6003570de81'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '23e959ea9bc39c5a85457a2811f45eeb0312e174f8c042c133eb23c5722e88a5'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '57980e5391abb7cb21e4e15a64369ea6ae5c7646eeb3ce6c32c104b2de3cda7b'
'rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rlus/v20160803/rlus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' 'a11f793a39d025b1bde14ebc005f3433331efa6befa9f05130089822a27db1a3'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '7b05cf9fa405bd1178e59bab83f60637b514eaa9f8ed085d18901fe83abfd9cd'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '6505aa3210a8dda72628082a7ceeeb89586bcc20cf658456e6be83fc47f5a0b9'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '625fa8acb01062c620038c989e63c86320a33b7a78ee17698bff56a45db31f85'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' 'f1f1d8e0c3ece5b0471a2aaf8dedf52fd96507f088716d7d9f2d3feff8e2921c'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '795433c17e24b39f762d166b82e4543c0c75b86f97f09800c64a13657e7d98e2'
'rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsds/v20160803/rsds_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' 'c59a1d0fe1bf2e4065025df47026665132d2383107dd93fd221aae5f9760a372'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' 'b696eb0e1b5a40937e6f7769bf8d1fdb97dc832cb120e8aa6b35100ce0306d63'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' 'e4f7b40e899a79b4935a99c5b027be3f9a4ad63102efb5da97177ebf3500ef8d'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '5b39ee9989dd87133460523d4a75b65b03ed66e8d81c5fb9c7ff9c520595e17e'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '7f4ba7f388de54852e94e89f519defe8ed751e60c88f96a527fbf5aa34099ef1'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '5086aae9041565763a9899dd16119c70bee95b9ab622aa7299c4e7326c529fef'
'rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/rsus/v20160803/rsus_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '635acf347c311e3d7a916728b0ecda243e8b09244c85ec5747d268ce52e9e7c9'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' 'cf5bc7a1a74dc7f5cc31970ceb2599107f31b72b4a5695562b8c319bee08bb72'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '4b0f5177e5c13a41eb2e595193c5a472956ef0054820a0e102873941a7164ee8'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '928d1605ff7beec9167857b63e9e8f991ed2afe66a3648680ba0be16cdc8fcd1'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '97ba3900be318b626e09818f8d3b3884a1039c14837344fe3546f65d4a9c406f'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' 'dd6c2c7543df6d16b0e6a963cbf3ec0de56299b6bbe29cd8f9acfc6c63af1740'
'sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/sund/v20160803/sund_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' 'd94ed68672650e02a01bf9e7a8480ca25af625283f47887bc8273f9f735a1860'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '158b5be8db46e49b6fb5783b032311efc2afff749eb3fddb8de408fa890250cc'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '1a17ce07a12f94e96af9f186c7706d283cdd7ceecfacf4af48b8dc31c2e54f12'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' 'ad7b6f39ab04cc1855845b767d92008a5347033ed4f56e8d158773686aa1e579'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' '443617f4c26a716dce30dd4adc50298a026a077f7ee97d29dc9c14a328689408'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' 'cdbd934410304a1f0ac7ba3be3c08e69020e9e0f454560bb1a4a05d947e1ca5c'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '6806beb1ea58b70d0092fefa316669f590ddf6e988f83a53c49c3787d7ea46d5'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '5d89997bc516a29d8c3edad4f79ae390b17754227705daa23eb94ee4b2409dd1'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' '4b4cf204e98543a0dafdc216a743d5072f0143a38a8e170ae331e86d072de592'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '8aafbc8f776957aaeb0c046b1709aea2dd92fed30d9edff1bb7459b33f4a9de0'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' 'bb0744d68f21ffe59db8f7e5a038cac811dc28daac9efbe999bf20b0d23e2973'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' '75375220460ec8d1c53077c886bdadc2cc63abc6eedbca19a8e0e588f73ca711'
'tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmax/v20160803/tasmax_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' '3fe03717bebdad778b3d247a18ae446dc76f22142fc28a3edee72e89c5d98074'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20410101-20451231.nc' 'SHA256' '99119b2ebd2c4df1107c7d8210d5a8bb291508242d569cb29df20ac634c34bf4'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20460101-20501231.nc' 'SHA256' 'fd8873bb0cb99132d5f5b36cb314cff2b31e395b13b472356499253d4720fa99'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20510101-20551231.nc' 'SHA256' '6bb5e0613740f811e7670ba588265836bcfcbca4bef3b5679bbaa3f92042934a'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20560101-20601231.nc' 'SHA256' 'edbd61f72b111a60ac66098aad7306f43971776bf0b7966f8c0070e8fbda8a26'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20610101-20651231.nc' 'SHA256' 'cd5f3653bb6fbfa089d32eb60bb4a63ec5a02b7282a94ba48e876f7a845d3d46'
'tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/day/tasmin/v20160803/tasmin_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_day_20660101-20701231.nc' 'SHA256' 'c8ff98a6bf317a88dea973075d5ab4d9183da23cf7a1c790246a70f0ff344123'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1.
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else

        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"

    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi

    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi



    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"

        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi

    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"

  #Wget args.
  if ((insecure))
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "
  fi

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth))
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"
  fi

  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi


  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi


  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;

  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data.
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( "$redirects" == 1 )) &&
  if  echo "$http_resp" | grep -q "/esg-orp/"
  then
   urls=$(echo "$http_resp" | grep -E -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"

   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))
   then
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | grep -E -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | grep -E -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/"
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"

  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi

  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi


  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi


  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi

  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))
  then
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi


  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi


  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( redirects == 2  )) &&
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))
  then

   urls=$(echo "$http_resp" | grep -E -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2)

   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"


   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"

   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi

   #Evaluate response.
   #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
   #(( "$redirects" != 5 )) \
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))
   then
    rm "$filename"
    download_http_sec_retry
   fi

  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  #Evaluate response.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))
  then
   rm "$filename"
   download_http_sec_retry
  fi #if error during http basic authentication.

}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"

    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"

        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi

        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have.
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count

        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }
                fi
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi

                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done

        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi

done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 297 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then

 if (( ! insecure))
 then
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"

 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ]
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder.
 if [[ ! -d $COOKIES_FOLDER ]]
 then
  mkdir $COOKIES_FOLDER
 fi

 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) )
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi


  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi

  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
