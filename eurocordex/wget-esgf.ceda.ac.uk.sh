#!/bin/bash
##############################################################################
# ESG Federation download script
#
# NOTE: this file has been modified to remove data files that do not
# correspond to the study time range, i.e. outside 1976-2005 and 2041-2070.
# Additionally, egrep has been replaced with grep -E.
# Last updated by N. M. Streethran - Wed 14 Sep 23:18:50 IST 2022.
#
# Template version: 1.2
# Generated by esgf.ceda.ac.uk - 2022/09/14 16:08:15
# Search URL: https://esgf.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tasmin.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tasmax.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tas.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rsus.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rsds.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rlus.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rlds.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.pr.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.mrso.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.evspsblpot.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tasmin.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tasmax.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tas.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rsus.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rsds.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rlus.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rlds.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.pr.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.mrso.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.evspsblpot.v20201111|esgf.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############"
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tasmin.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tasmax.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.tas.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rsus.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rsds.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rlus.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.rlds.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.pr.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.mrso.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.HadREM3-GA7-05.v2.day.evspsblpot.v20210113|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tasmin.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tasmax.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.tas.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rsus.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rsds.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rlus.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.rlds.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.pr.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.mrso.v20201111|esgf.ceda.ac.uk&dataset_id=cordex.output.EUR-11.MOHC.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.HadREM3-GA7-05.v2.day.evspsblpot.v20201111|esgf.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '8ebec90cd555462d508ace6d431cb3dd352304355eb6f9a5d331b8fddc7eb996'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '64b7488f1bab316342c0994934b4ca987af8f219cbfa57195c1d93a4b73b33d7'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' '0739a8ba49a0809f9cdefbb28d2b053147f68362f207c781b6f0c3eaadb8f9d4'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '70a1ce2f5609b5022fd6ed39284dfe12bf37a089f7d4d6096e1cee47b903b33b'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' '9b15642c243f9279f7e908d29e0f9a4eb14e090bd18779a0a91a5a9979b87be3'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20201111/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '429c4c239ae5606bdabc45d327b0ab700517f05c9a748bac9c44c2fa44c35711'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '62a2f089e0c9849d7d03fa3fb0946bda099e11acc29c8d038cdb6243bb075923'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' 'a436f9724ea1d5dc896bff42c78096ab4584bada61146b4a600bd8ecab5a8cbd'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' '105c87e99982b001bf5779616da19c0470daf693222789ad593ed85eb3eca329'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '3120d7c4c6d23e6c898fb5e291799a8fd31b2ccbdf4d4b6758ae39f2909980b7'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'fa200f3266c72d41c0f912f04f339f613bc60fdacb0ee716c685972201611940'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20201111/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '010874d6cd5371f785673b8b2e24623d77d7691e9b1f5c40da7b6c7d71dec8c6'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '3b6723853e58733ad677a6a64c5aabe0df6c8e3daeec9076cc6dce085909edd5'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '90ce1159cf80a5e6fe3f794ab283cb7872b0b208112caa3c5d17a612b9d673b7'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' 'da3b48e4a47b6378c5f074a81edb4c0304063886b9f104b67bdef875ea7e5852'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '072bf032c58b33b4a383ff9a1be439a3e026d5643513be6835a9e99dbe4fd7e7'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'b47ccbe4b7c0fad68c5bf052134b1ddd9535c492495eba87edea029834fb088f'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20201111/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '269a335ea5223f00f816194f5cdf1920af916b106d8e34392751945a6e4ce495'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '8f8fe1d9d4c5a4ee5f1caf2a85661d6b988f020df1d02be9afa8d14c9e6ebc1d'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '21fbefc080d12070e934dacad78e41db43c73c11be533848737903e20d047458'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' 'df1d9edd186d92ad3a0bc8c97ba47e965e565f398a5a0c1917a1a6596b3ea738'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '02ed940e031897fd2afd175e10500f66e1cfd4d8b0996ec1ac30ea62e7087bf5'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'b96805c3237760667b97c8cd0464e2cb6d8ff8b6a89454b1b01a9c979b1f1bfd'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20201111/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' 'e0e4ad374dca46db7d7971857349f724758b207d6f50dadb1dea6c4a38b7649f'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' 'fa7228abecec1c44d06dbe2a85c1d2984ecef11350c6f1b705c2401518ea8b14'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' 'ffc12261cceadacff994df175aa23dc120d4c978d97852b5b0e17dfc54b84ddb'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' 'da6daaa107ed0809ae8adbcd8b84774a93a96a7b67c613c7a5b9d921af585ff9'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' 'a6fcaab619f102aff13ab1cfac379b73fb00b95e6be74f5b63484bb28f304eba'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' '3745116110de3489637e83bb0bf0bdf55757bef6bc3cc810ca64443a0d0e209a'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20201111/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '8496e6d4270adcd914c553ecfddad733e85661653674a85c41daddaa625552f5'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' 'da7ce4ea7f1d7b882ed9371ed2f7a478faaf1db337bd91fdac5b2ed842f7c5f6'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' 'afaeec7307fe6ebe70a6bfd0738d83398eedaf7547eefd33303d9c014ffe2a0a'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' 'bcb319bdc112fc01dfc14ad748e2e7ca569f25f88271c481603b560d7a5c90bb'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '64ec24635e02fb6b2144952778dd6b427e69e04315b8c19c344e4bdc763762a4'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'dd3ff4d26d248db74171cd8b89930c0c015005c77d240646694f031979b2e191'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20201111/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '070e604bce5ae73baf419f91abb78d6fd6354b714b8f3cbc93bef090a93248a7'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '3aef07fc3a9fb8af906c69cb26cb3fb46fafa34b1952cc580c19ea669264c537'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '730bd97f274f1a6c798b0ac62302f6a4d91259cab62e263b6f9dbb37034e580b'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' 'ebf72136cceac5f7c54d8fbfc85ba5797ff01fdc7b937d65cee9c1bfca7f49fa'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '595ac33d3655f65ca6db8ef75d349182f36ffb80139c36b3558e17ea8d3438c6'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' '5554fe28aa6a69da9c093b940cb168d6d3e02305e7e9de19ac4eace53f2a9167'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20201111/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' 'c43ad7cb05751c3333396e9880edaf63eaec94bde22330d0e303e4bb936d12ec'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '4a67c7ec2c2686dfb08a1788229f1c568f137a4ed7894f5f1115e89a772a3a4a'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '69edacc942eaf1867cb7f404c2847adb0b3e4f2ccb41d5acc9ed51d62041876d'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' '9994050370435f85b2ec96d4286fe00e2a7a549687d207e9eba963a9ce4557a1'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '05932c92081d9e88cad5e4ac95624e7981ebb6fb4af197b31a3b170e816b8404'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' '033719dfd54bc12161fc28bdfe516f9d18434daa3caf0454fa3ac897391aabac'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20201111/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '1edd0bb0f75b727a01fd61f0117ea04689adda8629ce6843d0e614430444d0d0'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' '9730c9fea47efc01cbf51b794c58228fefefda1b072dccc5fa4fe2e40455fb7b'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' 'fe0ad6ba612677d960a31ec3b2f5c09224398148d71689f9ffedeb479a96cd27'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' '12dff6d33e1de1865d4a623b60a8f7bf569098091581d9c81b323e3263720411'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '89dc341c3d85e3956fb33c81d7415c3fe7de0d911f702c887ee9883f743c5825'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'ea7daeaf1f7e54e937b4d437e9b8ae3dc11990aea7aa9062c62e398a996476a1'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20201111/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' '2bd2faeda567c8641a66208b8b0b8bf6170531c876201b4e97d3fcd905cbc490'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19760101-19801231.nc' 'SHA256' 'de169fbfea36df9976ae26bd1fb012b92a9c0b6f34ee2c7f9dd1ea9608177178'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19810101-19851231.nc' 'SHA256' '0346bc04787eeb30bff5eda7ce31295c5a288c4bbe1826002c8ec4a3df7d3bd1'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19860101-19901231.nc' 'SHA256' '87f8d6e83e90c23bc0030df6046a9f899d1e05ec30664f17df4bf8ff58a11338'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19910101-19951231.nc' 'SHA256' '69dc47dca9da85d3acb2e59fe94e7cfcefd03dfeae2d679a139fa6d5356fffc5'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_19960101-20001231.nc' 'SHA256' 'd6de7f48c9786dab85955c3bda0d3c6d0e2e36cb785ed846249ac561f15ef929'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20201111/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20010101-20051231.nc' 'SHA256' 'b4547b28c814f63f0cbb2bb88bc9f9b98426929e6b358827284749f555829bad'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' 'f3109ec16c46bae44281c07b56d2ad2c4a32f51b23d43db27188cca631e4b364'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' '242bfdf511fbf3357ef4b4c9218abb19131180064b05da77fd13137d0aeaefdd'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' 'a38bdb44ac087214c4e6de5645b499b3db641c061344e7408789a1ef2199e211'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' 'd55c5f298e8e082737920a7609d64ef2e0e963d28aa2a57abeb6d0e73a94552d'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '6acdab649e577a16ad42586f45afde9de91917f685470013bb9c76e22f3ec6e6'
'evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/evspsblpot/v20210113/evspsblpot_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'feed5ca0fea84ff9e0c1402e9bc26a49f392584f3fdb20d92dbe6d9b3a8b0ace'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '04f655e63c0e445b80e1a6f9ae0b536e127300cc7870d7d03f0c404dd531463a'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' 'f3c80530c9f4c1914734e3f47d9e3fd99b4312f9fe26b0e3f9adcf6709bbe298'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '58644a661e2a2c253c6701ce716c27f4b2f6472a16d34dc7e903302ee6db73e2'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' '9fe1a3a2dc2732e2afd80f57781ab5384fe454b6041b693da2c88b0220857628'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '1e8a914a85d715f2d9c9dfd97c08616917baa577465c0dac3f710e84d42206f7'
'mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/mrso/v20210113/mrso_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'c0cb9e778f689ca045d7e3993aacca4c8a1805229c8f53d45ce8f4169ee356af'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '1759758f149846ee72cf2b7ed41deee0acb03bb6257c6f9a34735417cc0b555e'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' '66c07b67256ddc1761cf99b1f33be0b28aa652217c446231dd3a00f9cec89ef9'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '65e6dabfa092aeaa3fb23616455ae770abe20a91e4affb78cd732d2e202cd77a'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' 'e3f75cb1ea5cc3cf2716517a673324d43145205959771640acbce340bcaf42e9'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '3aac10244b4a59498644073e2b1c7c22bc2710e2511dc8c2ceaf58c2f7880434'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/pr/v20210113/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'd3d7b56865cdf3053c5ae60df9b064f8df4e8538b432a684c3a49290c5189f8b'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' 'ac6ad03aef8b0c20ae5d93dbf50033a8e912ccbe37ce26360f4733bc56db7c43'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' 'dfe433c3bed92a46f61cb1c63819dc7339cbc3eccdcbd93fb33681de1330ff3f'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '9602121b73a410fbf47fb40952694e3968c1bc68f6f62eb37a74e8666a9ddd04'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' 'b558fb9be6eda2db1ddbfe3165799e4e47228fd475d0e2edf505128ecb59b98a'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' 'ff5ff168f3c514a9defa022c5b9fcf7e0b04c168d4e0b33f238c95be7271f2ab'
'rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlds/v20210113/rlds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' '74b67e9cbf6d85627202c091c2d5f725b3c322b6f578629187804345a3500edc'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' 'a6e53166a3114019df3ffa1a8a70e973e0ce29e77881c5da386fb9b63444a77e'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' 'ae3843bc18ca46079d80b31dc18feabf3609ab066a16fa4b0f5fa4f25ef54ab2'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '10ad366b00be6390330734e450e08d9c53a11b26cf6fdf248b11ec2fab1c57e8'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' '3478fc8739268aa630753b221a603c56ce65e2b18c41096859d3d7f5a2ebfa29'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' 'b9a74ff96f701d5987de569dede590dc7583af884a3f01a56648aed337927a15'
'rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rlus/v20210113/rlus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' '064c5fb4be17c76ddfb0ec15b8852c01516e3d25cb394cd917712debd9340479'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '3bdf85a62895d483ede1ff71d0cc598a02a608682374f0c1b35f26d8e2a93be0'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' '53c6feca46c1d99a90e1fa58cc9dd3a2cd27717c4ff3148af8c4a50faf83a9fc'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '9d82d7c02e6f6ab416cbad9ca3d40940cc8661bda0db17da04eab898d9660af7'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' 'd106d526cb959dc24abf48f88fcefccff1c1fd90938f2635516eb47ce62d2cc1'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' 'd0404adeafb2e8315222a38320aec9ebdf3e6dc7f06119f234005d5bf8df330b'
'rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsds/v20210113/rsds_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'e2bc0491a6c90a02950a757d7fee00cc529c468b447d898c217026a1f3bca81e'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '6aa4b5540036647827c1a8d319ca9f94ab69796db61183b4f4d7aa421769975c'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' '4577607a58335e1a2e15e02504b494f87ec21559132700373ab6dc3b316e0607'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '252d9df32e863596ceea9132c59a574902aef2465004824509727a71c6d6213a'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' '180dec1ad0dd57a18ae08af456a8caf3710ebf027502163b3a382f6424f6d05c'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '048e041f1bc615289dbe4c44406ad950c643a676f0cf4f60a612ff236868584c'
'rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/rsus/v20210113/rsus_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' '58310b5705a86357f38259c83aae469976218ec53754573f1f1313b91d11046e'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '118908a2c14d366ed6d2067799260839af735a7f1e54916577cdc396f24047c1'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' 'faeb64f0d315f9214342fa3ea8b6b5e08f203a87a1952ee52743b72f84d1a6a1'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '648be41e15256f1e76b01c69b0bca5d9bdd88daada9516e44785cc90b6aabb31'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' 'ba4bea69acbec4e9cbaa2dcb2e8f6e9b6ed3767a5003eb7d9496fd76195f0f60'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '947089287964abe6c9150d8fe143a9fa9a3d689d5f14f06f77bd0f33e9051c4c'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tas/v20210113/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'ce80fe058f6ed2f021b94fb2951cc765d9d7fe93e215428e0f875fd763cf8e85'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '2be5e4f93327a5d9791eef4b2b65e1728d741a25fc6d8400ca37a1673892decb'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' 'efb9e7655a627219ff612a72bdf83b1aa38409889bf405efb7b949e7192da7dd'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '324f68706f03bb7657246cb2bedee4724b75aa05870e7ae79f7388bf42ae5578'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' '40f1892a036563feed7b5952083f2fc360f7bda8322328a82d45f9710053984b'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '857fb8e49614630d8290ac2e1e2b9837632e79e90317adc3fa1eb95daecd2262'
'tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmax/v20210113/tasmax_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' '7a36333cd593006e848034525521f218bcd60355b3c3745aef73da68fbd78680'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20410101-20451231.nc' 'SHA256' '6577c80beeb3cdb43b4475f644683ff5be5a92ff86228e7ddb950d139dde8ee2'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20460101-20501231.nc' 'SHA256' '41bbb00aedf6ebc8f2c9144a3a4df3b71a07f662b92e0242e1cc165771031ac4'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20510101-20551231.nc' 'SHA256' '122a170fa60c9f45e4feff2fdb98646e0c63d5fb14ca9ed6f0d5a01a2615ae29'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20560101-20601231.nc' 'SHA256' '16d7b7d4cf7e03f2ed29b33a57d0f0c8a48a504f91a5ea65698f2691a5ca253f'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20610101-20651231.nc' 'SHA256' '1fd2d2c0b046f020d219ab65535803bd2f256e18e7426ea65bb2f533e1fbfdec'
'tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cordex/CORDEX/output/EUR-11/MOHC/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/MOHC-HadREM3-GA7-05/v2/day/tasmin/v20210113/tasmin_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_MOHC-HadREM3-GA7-05_v2_day_20660101-20701231.nc' 'SHA256' 'd4fd84a31e4c344121a515883aa417deeaa72016f1019dfd42d972b970cfb2a1'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1.
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else

        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"

    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi

    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi



    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"

        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi

    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"

  #Wget args.
  if ((insecure))
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "
  fi

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth))
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"
  fi

  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi


  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi


  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;

  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data.
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( "$redirects" == 1 )) &&
  if  echo "$http_resp" | grep -q "/esg-orp/"
  then
   urls=$(echo "$http_resp" | grep -E -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"

   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))
   then
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | grep -E -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | grep -E -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/"
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"

  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi

  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi


  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi


  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi

  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))
  then
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi


  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi


  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( redirects == 2  )) &&
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))
  then

   urls=$(echo "$http_resp" | grep -E -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2)

   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"


   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"

   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi

   #Evaluate response.
   #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
   #(( "$redirects" != 5 )) \
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))
   then
    rm "$filename"
    download_http_sec_retry
   fi

  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"


  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi

  #Evaluate response.
  #redirects=$(echo "$http_resp" | grep -E -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))
  then
   rm "$filename"
   download_http_sec_retry
  fi #if error during http basic authentication.

}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"

    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"

        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi

        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have.
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count

        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }
                fi
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi

                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done

        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi

done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 310 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then

 if (( ! insecure))
 then
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"

 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ]
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder.
 if [[ ! -d $COOKIES_FOLDER ]]
 then
  mkdir $COOKIES_FOLDER
 fi

 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) )
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi


  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi

  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
